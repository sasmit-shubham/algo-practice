class Solution {
public:
    unordered_map<string,vector<pair<string,double>>>adj;
    unordered_map<string,bool>vis;
    void dfs(string u, string v, double &ans,vector<double>&vec, bool &flag){
        vis[u] = true;
        double temp =ans;
        for(auto x: adj[u]){
            ans = temp;
            if(vis[x.first]==false){
                if(x.first==v and flag==false){
                    flag=true;
                    vec.push_back(x.second*ans);
                    return;
                }else{
                    
                     ans*=x.second;

                     dfs(x.first,v,ans,vec,flag);
                }
            }
        }
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values,             vector<vector<string>>& queries) {
        for(int i=0; i<equations.size(); i++){
            adj[equations[i][0]].push_back({equations[i][1],values[i]});
            adj[equations[i][1]].push_back({equations[i][0],1/values[i]});
        }
        

        
          vector<double>ans;           
            for(int i=0; i<queries.size();i++){
                if(adj.count(queries[i][0]) and queries[i][0]==queries[i][1]){
                    ans.push_back(1.00000);
                    continue;
                }else if((adj.count(queries[i][0])) ==false or adj.count(queries[i][1]) == false){
                    ans.push_back(-1);
                    continue;
                }
                for(auto x: adj){
                    vis[x.first] = false;
                }
                double intializer =1;
                bool flag = false;
                dfs(queries[i][0],queries[i][1],intializer,ans,flag);
                if(flag==false){
                    ans.push_back(-1);
                }
                // ans.push_back(intializer);
            }
        
        return ans;
    }
};


