
void dfs(vector<vector<int>> &adj, vector<bool>&vis, int u){
    if(vis[u])
        return;
    vis[u] = true;
    for(int v: adj[u]){
        // cout<<v<<" "<<u<<endl;
        if(vis[v]==false){
            dfs(adj,vis,v);
        }
    }
}
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size()<(n-1)){
            return -1;
        }
        vector<bool>vis(n,false);
        vector<vector<int>>adj(n);
        
        
        for(int i=0; i<connections.size(); i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        
        
        int cnt =0;
        
        for(int i=0; i<n; i++){
            if(vis[i]==false){
                dfs(adj,vis,i);
                cnt++;
            }
        }
        return cnt-1;
        
        
    }
};
