class Solution {
public:
    void dfs(int i, vector<vector<int>>& adj, vector<bool>&vis){
        if(vis[i]) return;
        vis[i]=true;
        for(int u : adj[i]){
            if(vis[u]==false){
                dfs(u,adj,vis);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<vector<int>>adj(n+1);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(isConnected[i][j]==1){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int cnt =0;
        vector<bool>vis(n+1,false);
        for(int i=0; i<n; i++){
            if(vis[i]==false){
                dfs(i,adj,vis);
                ++cnt;
            }
        }
        return cnt;
    }
};
