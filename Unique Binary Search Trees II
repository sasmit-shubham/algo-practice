/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> solve(int i, int j){
        vector<TreeNode*>res;
        if(i>j){
            res.push_back(NULL);
            return res;
        }
        
        for(int k=i; k<=j; k++){
            vector<TreeNode*> leftSubtree = solve(i,k-1);
            vector<TreeNode*> rightSubtree = solve(k+1,j);
            
            for(int l=0; l<leftSubtree.size(); l++){
                for(int m=0; m<rightSubtree.size(); m++){
                    TreeNode* node = new TreeNode(k);
                    node->left = leftSubtree[l];
                    node->right = rightSubtree[m];
                    res.push_back(node);
                }
            }
        }
        
        return res;
        
    }
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*>ans;
        if(n==1){
            TreeNode* t = new TreeNode(1);
            return {t};
        }
       return solve(1,n); 
        
    }
};
