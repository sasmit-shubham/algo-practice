class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
      bool isPresent =false;  // checks if endword is present in Dict
      unordered_set<string> myset;
      
      // insert all words into the set container 
      for(auto word: wordList){
          
          if( word == endWord ){
              isPresent = true;
          }
          
          myset.insert(word);
      }
        
      if(isPresent == false){
          return 0;
      }
      
      queue<string>q;
      q.push(beginWord);
      int depth = 0;
        
      while(!q.empty()){
          depth+=1;
          int qSz = q.size();
          while( qSz-- ){
              string curr = q.front();
              q.pop();
              
              for(int i=0; i<curr.size(); i++){
                  
                  string temp = curr;
                  
                  for(char c = 'a'; c<='z'; ++c){
                      temp[i] = c;
                      
                      if(curr == temp){
                          continue; // skip the same word
                      }
                      
                      if(temp == endWord){
                          return depth+1; // endword found
                      }
                      
                      if(myset.find(temp) != myset.end()){
                          q.push(temp);
                          myset.erase(temp);
                      }
                      
                    
                  }
              }
          }
      }
      return 0;
    }
};
