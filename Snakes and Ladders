class Solution {
public:
    pair<int, int > convertIdx(int idx, int n){
        int i = (idx/n);
        if(idx%n!=0){
            i++;
        }
        
        int j = idx%n;
        
        if(idx%n==0){
            j=n;
        }
        // cout<<i<<" "<<j<<" "<<idx<<endl;
        return {i,j};
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        
        int n = board.size();
        vector<vector<int>>v(n+1,vector<int>(n+1,0));
        bool flag = false;
        for(int i=n-1; i>=0; i--){
            if(flag==false)reverse(board[i].begin(),board[i].end());
            for(int j=n-1; j>=0; j--){
                if(board[i][j]== -1)
                v[n-i][n-j] = board[i][j];
                else
                v[n-i][n-j]= board[i][j];
            }
            if(flag==false){
                flag=true;
            }else{
                flag=false;
            }
        }
        vector<vector<bool>>vis(n+1,vector<bool>(n+1,false));
        queue<int>q;
        q.push(1);
        int level =0;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                int tp = q.front();
                q.pop();
                
                pair<int,int>pp = convertIdx(tp,n);
                vis[pp.first][pp.second] = true;
                
                if(v[pp.first][pp.second]!= -1){
                    tp=v[pp.first][pp.second];
                }
                if((tp)==(n*n)){
                    return level;
                }
                
                // cout<<tp<<" "<<level<<endl;
                for(int i=1; i<=6; i++){
                    int x = tp+i;
                    if(x<=(n*n)){
                        pair<int,int>p = convertIdx(x,n);
                        if(vis[p.first][p.second])continue; 
                        q.push(x);
                    }
                }  
            }
            level++;
        }
        
        return -1;
    }
};
