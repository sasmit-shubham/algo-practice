class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        stack<int>st;
        
        vector<int>prevSmaller(n,-1);
        vector<int>nextSmaller(n,n);
        
        for(int i=0; i<n; i++){
            while(!st.empty() and arr[st.top()]>arr[i]){
                st.pop();
            }
            
            if(st.empty()){
                prevSmaller[i] = i+1; 
            }else{
                prevSmaller[i] = i-st.top();
            }
            
            st.push(i);
        }
        
        
        while(st.empty()==false)st.pop();
        
        for(int i=n-1; i>=0; i--){
            while(!st.empty() and arr[st.top()]>=arr[i]){
                st.pop();
            }
            if(st.empty()){
                nextSmaller[i] = n-i;
            }else{
                nextSmaller[i] = st.top()-i;
            }
            st.push(i);
                        
        }
        
        int mod = 1e9+7;
        int sum =0;
        for(int i=0; i<n; i++){
            long long int t = (arr[i]*nextSmaller[i])%mod;
            t = (t*prevSmaller[i])%mod;
            
            sum = (sum+t)%mod;
        }
        
        return sum;
        
        
        
    }
};
