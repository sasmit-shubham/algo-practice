/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<TreeNode*, TreeNode*>parent;
    void inorder(TreeNode* root, TreeNode* par,map<TreeNode*,TreeNode*> &parent){
        if(root==NULL){
            return;
        }
        parent[root] = par;
        inorder(root->left, root,parent);
        inorder(root->right,root,parent);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        if(k==0) return {target->val};
        map<TreeNode*, TreeNode*>parent;
        inorder(root,NULL,parent);
        unordered_set<TreeNode*>vis;
        vis.insert(target);
        vector<int>ans;
        queue<TreeNode*>q;
        q.push(target);
        int level=0;
        while(q.empty()==false){
            int sz = q.size();
            while(sz--){
                TreeNode* tp = q.front();
                q.pop();
                if(level==k){
                    ans.push_back(tp->val);
                    continue;
                }
                
                if(tp->left and vis.count(tp->left)==false){
                    q.push(tp->left);
                    vis.insert(tp->left);
                }
                
                if(tp->right and vis.count(tp->right) == false){
                    q.push(tp->right);
                    vis.insert(tp->right);
                }
                
                if(parent[tp] and vis.count(parent[tp])==false){
                    q.push(parent[tp]);
                    vis.insert(parent[tp]);
                }
            }
            level++;
        }
        
        
        
        
        return ans;
        
        
    }
};
