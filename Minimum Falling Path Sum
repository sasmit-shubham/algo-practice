class Solution {
public:
    bool ok(int i, int j, int n){
        return i>=0 and j>=0 and i<n and j<n;
    }
    int solve(vector<vector<int>>&matrix, vector<vector<int>>&dp, int i, int j){
        int n = matrix.size();
        if(i==n){
            return 0;
        }
        if(ok(i,j,n)==false){
            return 1000;
        }
        
        if(dp[i][j]!= -1){
            return dp[i][j];
        }
        
        
        
        return  dp[i][j]=matrix[i][j]+min({solve(matrix,dp,i+1,j),
                              solve(matrix,dp,i+1,j+1),
                              solve(matrix,dp,i+1,j-1)});
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int ans = INT_MAX;
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<n; k++){
                    dp[j][k]= -1;
                }
            }
            int sum = solve(matrix,dp,0,i);
            ans = min(ans,sum);
        }
        return ans;
    }
};
