class Solution {
public:
    vector<int> prevSmallerElement(vector<int>& heights){
        int n= heights.size();
        vector<int>ans(n);
        stack<int>myStack;
        for(int i=0; i<n; i++){
            while(!myStack.empty() and heights[myStack.top()]>=heights[i]){
                myStack.pop();     
            }
            
            if(myStack.empty()){
                ans[i]=-1;

            }else{
                int p = myStack.top();
                ans[i] = p;
            }
            
            myStack.push(i);
        }
        return ans;
    }
    
    vector<int>nextSmallerElement(vector<int>& heights){
        int n= heights.size();
        vector<int>ans(n);
        stack<int>myStack;
        for(int i=n-1; i>=0; i--){
            while(!myStack.empty() and heights[myStack.top()]>=heights[i]){
              myStack.pop();   
            }
            
            if(myStack.empty()){
                ans[i] = n;
            }else{
                int p = myStack.top();
                ans[i] = p;
            }
            
            myStack.push(i);
        }
        
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
       vector<int>nextSmaller = nextSmallerElement(heights);
       vector<int>prevSmaller = prevSmallerElement(heights);
        
        int mx = INT_MIN;
        int n = heights.size();
        for(int i=0; i<n; i++){
            // cout<<nextSmaller[i]<<endl;
           mx = max((nextSmaller[i]-prevSmaller[i]-1)*heights[i],mx); 
        }
        
        return mx;
        
    }
};
