int cnt=0;
void merge(vector<int>&nums,int left,  int mid, int right){
    int l = left;
    int r = mid+1;
    while(l<=mid and r<=right){
        if(long(nums[l]) > (long)2*nums[r]){
            cnt+=(mid-l+1);
            r++;
        }else{
            l++;
        }
        
        
    }
    sort(nums.begin()+left, nums.begin()+right+1);
    
}
void mergeSort(vector<int>&nums, int left ,int right){
    if(left==right)return;
    int mid = (left+right)/2;
    mergeSort(nums,left,mid);
    mergeSort(nums,mid+1,right);
    merge(nums,left,mid,right);
    
}
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        
        int n = nums.size();
        cnt =0;
        mergeSort(nums,0,n-1);
        return cnt;
    }
};


