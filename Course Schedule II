class Solution {
public:
    void dfs(int u, stack<int>&st, vector<bool>&vis, vector<vector<int>>&adj){
        if(vis[u]){
            return;
        }
        vis[u] = true;
        for(int v: adj[u]){
            if(vis[v]==false){
                dfs(v,st,vis,adj);
            }
        }
        st.push(u);
    }
    
    bool checkCycle(int i, vector<bool>&vis, vector<bool>&currVis, vector<vector<int>>&adj){
        if(vis[i]==false){
            vis[i]=true;
            currVis[i]=true;
            for(int v: adj[i]){
                if(!vis[v] and checkCycle(v,vis,currVis,adj)){
                    return true;
                }else if(currVis[v]){
                    return true;
                }
            }
        }
        currVis[i]=false;
        return false;
    }
    vector<int> findOrder(int n, vector<vector<int>>& pre) {
        vector<int>ans;
        vector<vector<int>>adj(n);
        for(int i=0; i<pre.size(); i++){
            adj[pre[i][1]].push_back(pre[i][0]);
        }
        // first check the cycle
        vector<bool>vis(n+1,false); 
        vector<bool>currVis(n+1,false);
        for(int i=0; i<n; i++){
            if(checkCycle(i,vis,currVis,adj)){
                return {};
            }
        }
        
        for(int i=0; i<n; i++){
            vis[i]=false;
        }
        stack<int>st;
        for(int i=0; i<n; i++){
            if(vis[i]==false){
                dfs(i,st,vis,adj);
            }
        }
        
        while(st.empty()==false){
            int tp = st.top();
            st.pop();
            ans.push_back(tp);
        }
        // reverse(ans.begin(),ans.end());
        return ans;
    }
};
