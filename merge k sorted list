/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 struct cmp
{
    bool operator()(ListNode* a, ListNode* b){
        return a->val>b->val;
    }
};
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& A) {
      if(A.size()==1 and A[0]==NULL){
          return NULL;
      }
      int n = A.size();
      priority_queue<ListNode*,vector<ListNode*>,cmp>pq;
      

      for(int i=0; i<n; i++){
          if(A[i]!=NULL)
              pq.push(A[i]);
      }
          
      ListNode* head = NULL;
      ListNode* temp;

     while(!pq.empty()){
        ListNode* tp = pq.top();
        pq.pop();
        if(head==NULL){
            head=tp;
            temp=tp;
        }else{
            temp->next = tp;
            temp= temp->next;
        }
        if(tp->next){
            pq.push(tp->next);
        }
     }

     return head;
        
    }
};
